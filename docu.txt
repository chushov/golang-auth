При разработке возникли некоторые вопросы и непонимание полной работы библиотек.
Сохранил прямо в репозитории то, что надо чекнуть, когда будет свободное время.

1. Проксирование. Сейчас разрешены коннекты со всех краёв земли, надо лишнее позакрывать
https://pkg.go.dev/github.com/gin-gonic/gin#section-readme

2. ОРМ-библиотека ГОРМ. Нужно бы чекнуть, что еще умеет интересного
https://github.com/go-gorm/gorm
https://gorm.io/

3. GIN — HTTP-фреймворк, оказался очень удобным и понятным
https://github.com/gin-gonic/gin

4. Работа с JWT-токенами. Нужно посмотреть, можно ли адским образом всё зашифровать
https://github.com/golang-jwt/jwt

---

Для запуска

1. Ставим SQL
2. Добавляем пользователя в SQL, правим main.go
3. go get .  — скачиваем все зависимости
4. go run . — запускаем приложение
5. Проще всего оказалось через REST Client в VSCode отправлять запросы. Ставим
6. В директории rest/ находятся файлы запроса регистрации, запроса токена и запроса информации по сгенерированному токену.
7. Кнопкой прямо в VSCode отправляем нужный запрос на эндпоинт, получаем ответ
8. Эндпоинты сгруппированы в api/ в файле main.go, где лежат все роуты
9. На каждый запрос придёт ответ и обработка ошибки. Терминал через GIN выведет статус и ошибку запроса.
10. Посмотреть на созданные учетные записи можно в Database внутри Goland. Прописываем локалхост, юзера и пароль, смотрим таблицу
11. Если именование таблицы не нравится, можно создать новую и переименовать. По умолчанию jwt_golang_auth